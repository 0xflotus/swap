{"name":"Swap","tagline":"Exchange rates library for PHP","body":"# Swap [![Build status][travis-image]][travis-url] [![Version][version-image]][version-url] [![PHP Version][php-version-image]][php-version-url] [![Total Downloads][downloads-image]][downloads-url] \r\n\r\n> Exchange rates library for PHP\r\n\r\n## Installation\r\n\r\n```bash\r\n$ composer require florianv/swap\r\n```\r\n\r\n## Usage\r\n\r\nFirst, you need to create an HTTP adapter provided by the [egeloen/ivory-http-adapter](https://github.com/egeloen/ivory-http-adapter)\r\nlibrary.\r\n\r\n```php\r\n$httpAdapter = new \\Ivory\\HttpAdapter\\FileGetContentsHttpAdapter();\r\n```\r\n\r\nThen, you can create a provider and add it to Swap:\r\n\r\n```php\r\n// Create the Yahoo Finance provider\r\n$yahooProvider = new \\Swap\\Provider\\YahooFinanceProvider($httpAdapter);\r\n\r\n// Create Swap with the provider\r\n$swap = new \\Swap\\Swap($yahooProvider);\r\n```\r\n\r\n### Quoting\r\n\r\nTo retrieve the latest exchange rate for a currency pair, you need to use the `quote()` method.\r\n\r\n```php\r\n$rate = $swap->quote('EUR/USD');\r\n\r\n// 1.187220\r\necho $rate;\r\n\r\n// 1.187220\r\necho $rate->getValue();\r\n\r\n// 15-01-11 21:30:00\r\necho $rate->getDate()->format('Y-m-d H:i:s');\r\n```\r\n\r\n> Currencies are expressed as their [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) code.\r\n\r\n### Chaining providers\r\n\r\nIt is possible to chain providers in order to use fallbacks in case the main providers don't support the currency or are unavailable.\r\nSimply create a `ChainProvider` wrapping the providers you want to chain.\r\n\r\n```php\r\n$chainProvider = new \\Swap\\Provider\\ChainProvider([\r\n    new \\Swap\\Provider\\YahooFinanceProvider($httpAdapter),\r\n    new \\Swap\\Provider\\GoogleFinanceProvider($httpAdapter)\r\n]);\r\n```\r\n\r\nThe rates will be first fetched using the Yahoo Finance provider and will fallback to Google Finance.\r\n\r\n### Caching\r\n\r\nFor performance reasons you might want to cache the rates during a given time.\r\n \r\n#### Doctrine Cache\r\n\r\n##### Installation\r\n\r\n```bash\r\n$ composer require doctrine/cache\r\n```\r\n\r\n##### Usage\r\n\r\n```php\r\n// Create the cache adapter\r\n$cache = new \\Swap\\Cache\\DoctrineCache(new \\Doctrine\\Common\\Cache\\ApcCache(), 3600);\r\n\r\n// Pass the cache to Swap\r\n$swap = new \\Swap\\Swap($provider, $cache);\r\n```\r\n\r\nAll rates will now be cached in APC during 3600 seconds.\r\n\r\n#### Illuminate Cache\r\n\r\n##### Installation\r\n\r\n```bash\r\n$ composer require illuminate/cache\r\n```\r\n\r\n##### Usage\r\n\r\n```php\r\n// Create the cache adapter\r\n$store = new \\Illuminate\\Cache\\ApcStore(new \\Illuminate\\Cache\\ApcWrapper());\r\n$cache = new \\Swap\\Cache\\IlluminateCache($store, 60);\r\n\r\n// Pass the cache to Swap\r\n$swap = new \\Swap\\Swap($provider, $cache);\r\n```\r\n\r\nAll rates will now be cached in APC during 60 minutes.\r\n\r\n### Currency Codes\r\n\r\nSwap provides an enumeration of currency codes so you can use autocompletion to avoid typos.\r\n\r\n```php\r\nuse \\Swap\\Util\\CurrencyCodes;\r\n\r\n// Retrieving the EUR/USD rate\r\n$rate = $swap->quote(new \\Swap\\Model\\CurrencyPair(\r\n    CurrencyCodes::ISO_EUR,\r\n    CurrencyCodes::ISO_USD\r\n));\r\n```\r\n\r\n## Providers\r\n\r\n- [European Central Bank](http://www.ecb.europa.eu/home/html/index.en.html)\r\nSupports only EUR as base currency.\r\n- [Google Finance](http://www.google.com/finance)\r\nSupports multiple currencies as base and quote currencies.\r\n- [Open Exchange Rates](https://openexchangerates.org)\r\nSupports only USD as base currency for the free version and multiple ones for the enterprise version.\r\n- [Xignite](https://www.xignite.com)\r\nYou must have access to the `XigniteGlobalCurrencies` API.\r\nSupports multiple currencies as base and quote currencies.\r\n- [Yahoo Finance](https://finance.yahoo.com/)\r\nSupports multiple currencies as base and quote currencies.\r\n- [WebserviceX](http://www.webservicex.net/ws/default.aspx)\r\nSupports multiple currencies as base and quote currencies.\r\n- [NationalBankOfRomania](http://www.bnr.ro)\r\nSupports only RON as base currency.\r\n\r\n## Integrations\r\n\r\n- A Symfony2 bundle [FlorianvSwapBundle](https://github.com/florianv/FlorianvSwapBundle).\r\n- A Laravel 5 package [florianv/laravel-swap](https://github.com/florianv/laravel-swap).\r\n\r\n## License\r\n\r\n[MIT](https://github.com/florianv/swap/blob/master/LICENSE)\r\n\r\n[travis-url]: https://travis-ci.org/florianv/swap\r\n[travis-image]: http://img.shields.io/travis/florianv/swap.svg?style=flat\r\n\r\n[downloads-url]: https://packagist.org/packages/florianv/swap\r\n[downloads-image]: https://img.shields.io/packagist/dt/florianv/swap.svg?style=flat\r\n\r\n[version-url]: https://packagist.org/packages/florianv/swap\r\n[version-image]: http://img.shields.io/packagist/v/florianv/swap.svg?style=flat\r\n\r\n[php-version-url]: https://packagist.org/packages/florianv/swap\r\n[php-version-image]: http://img.shields.io/badge/php-5.4+-ff69b4.svg\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}