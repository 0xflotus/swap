{"name":"Swap","tagline":"Exchange rates library for PHP 5.3+","body":"Swap\r\n====\r\n\r\n[![Build Status](https://travis-ci.org/florianv/swap.svg?branch=master)](https://travis-ci.org/florianv/swap)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/6f546245-569b-4b1b-b520-44e4864380fb/mini.png)](https://insight.sensiolabs.com/projects/6f546245-569b-4b1b-b520-44e4864380fb)\r\n[![Latest Stable Version](https://poser.pugx.org/florianv/swap/v/stable.png)](https://packagist.org/packages/florianv/swap)\r\n[![Latest Unstable Version](https://poser.pugx.org/florianv/swap/v/unstable.png)](https://packagist.org/packages/florianv/swap)\r\n[![Total Downloads](https://poser.pugx.org/florianv/swap/downloads.png)](https://packagist.org/packages/florianv/swap)\r\n[![License](https://poser.pugx.org/florianv/swap/license.png)](https://packagist.org/packages/florianv/swap)\r\n\r\nSwap is an exchange rates library for PHP 5.3+. It offers multiple providers and leverage their ability\r\nto retrieve multiple quotes at once, while simulating this behavior for those who don't support it\r\nby using Guzzle's parallel HTTP requests.\r\n\r\n## Installation\r\n\r\nThe recommended way to install Swap is via [Composer](https://getcomposer.org).\r\n\r\nAdd this line to your `composer.json` file:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"florianv/swap\": \"~1.0\"\r\n    }\r\n}\r\n```\r\n\r\nTell Composer to update the dependency by running:\r\n\r\n```bash\r\n$ php composer.phar update florianv/swap\r\n```\r\n\r\n## Usage\r\n\r\nFirstly, you need to create an HTTP client:\r\n\r\n```php\r\n$client = new \\Guzzle\\Http\\Client();\r\n```\r\n\r\nThen you can create a provider:\r\n\r\n```php\r\n$yahoo = new \\Swap\\Provider\\YahooFinance($client);\r\n```\r\n\r\nCreate a Swap instance and add the provider:\r\n\r\n```php\r\n$swap = new Swap\\Swap();\r\n$swap->addProvider($yahoo);\r\n```\r\n\r\nYour job is to create a currency pair with a base and quote currencies expressed as their\r\n[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) code, stick it to Swap and it will set its rate.\r\n\r\n```php\r\n// Create the currency pair EUR/USD\r\n$pair = new \\Swap\\Model\\CurrencyPair('EUR', 'USD');\r\n\r\n// Quotes the pair\r\n$swap->quote($pair);\r\n\r\n// 1.3751\r\necho $pair->getRate();\r\n```\r\n\r\nWe created a currency pair `EUR/USD`, quoted it with the `YahooFinance` provider and got `1.3751` as rate\r\nwhich means that `1 EUR` is exchanged for `1.3751 USD`.\r\n\r\n### Multiple pairs\r\n\r\nYou can also quote multiple pairs at once:\r\n\r\n```php\r\nuse Swap\\Model\\CurrencyPair;\r\n\r\n$eurUsd = new CurrencyPair('EUR', 'USD');\r\n$usdGbp = new CurrencyPair('USD', 'GBP');\r\n$gbpJpy = new CurrencyPair('GBP', 'JPY');\r\n\r\n$swap->quote(array($eurUsd, $usdGbp, $gbpJpy));\r\n\r\n// 1.3751\r\necho $eurUsd->getRate();\r\n\r\n// 0.5938\r\necho $usdGbp->getRate();\r\n\r\n// 171.5772\r\necho $gbpJpy->getRate();\r\n```\r\n\r\n### Date\r\n\r\nIt is possible to retrieve the date at which the rate was calculated. If the provider does not give\r\nthis information, it will be set to now.\r\n\r\n```php\r\n// $date is a \\DateTime instance\r\n$date = $pair->getDate()\r\n```\r\n\r\n### Chained providers\r\n\r\nProviders can be chained. When an exception is thrown by a provider, the following will be used\r\nto quote the pairs that were not quoted.\r\n\r\n```php\r\n$yahoo = new \\Swap\\Provider\\YahooFinance($client);\r\n$google = new \\Swap\\Provider\\GoogleFinance($client);\r\n\r\n$swap->addProvider($yahoo);\r\n$swap->addProvider($google);\r\n```\r\n\r\n### Exception Handling\r\n\r\nSwap throws different types of exceptions:\r\n\r\n```php\r\ntry {\r\n    $swap->quote($pair);\r\n} catch (\\Swap\\Exception\\QuotationException $e) {\r\n\r\n    // Default exception when the quote operation failed\r\n    // For example when the HTTP request failed\r\n\r\n} catch (\\Swap\\Exception\\UnsupportedBaseCurrencyException $e) {\r\n\r\n    // Exception thrown when a currency is not supported as base by the provider\r\n\r\n} catch (\\Swap\\Exception\\UnsupportedCurrencyPairException $e) {\r\n\r\n    // Exception thrown when the currency pair is not supported\r\n}\r\n```\r\n\r\n## Providers\r\n\r\n- [European Central Bank](http://www.ecb.europa.eu/home/html/index.en.html)\r\n\r\nSupports only EUR as base currency.\r\n\r\n- [Google Finance](http://www.google.com/finance)\r\n\r\nSupports multiple currencies as base and quote currencies.\r\n\r\n- [Open Exchange Rates](https://openexchangerates.org)\r\n\r\nSupports only USD as base currency for the free version and multiple ones for the enterprise version.\r\n\r\n- [Xignite](https://www.xignite.com)\r\n\r\nSupports multiple currencies as base and quote currencies.\r\n\r\n- [Yahoo Finance](https://finance.yahoo.com/)\r\n\r\nSupports multiple currencies as base and quote currencies.\r\n\r\n## License\r\n\r\n[MIT](https://github.com/florianv/swap/blob/master/LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}